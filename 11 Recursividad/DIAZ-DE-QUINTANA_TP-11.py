# Trabajo pr√°ctico N¬∫ 11 de Recursividad. PROGRAMACION 1
# Alumna: D√≠az de Quintana, Melisa. Comisi√≥n: 12

# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. 
# Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los 
# n√∫meros enteros entre 1 y el n√∫mero que indique el usuario 
"""
def fact_recursiva (n):
        if n == 0:
            return 1
        else:
            return n * fact_recursiva (n-1)

num = (int(input("Por favor ingrese un n√∫mero: ")))
print (f"El factorial del n√∫mero ingresado es: {fact_recursiva(num)}")
"""
# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique. 
"""
def fibonacci_recur(posicion):
    if posicion == 0:
        return 0
    elif posicion == 1:
        return 1
    else:
        return fibonacci_recur(posicion-1) + fibonacci_recur(posicion-2)

num1 = (int(input("Por favor ingrese la posici√≥n a consultar: ")))
for i in range(num1):
    print (f"En la posici√≥n {i} obtenemos el valor de fibonacci {fibonacci_recur(i)}")
"""
# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
# utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. 
"""
def pot_recur(n, m):
    if m == 0:  #Caso base // tood num elevado a la 0 da 1
        return 1
    else:
        return n * pot_recur(n, m - 1)  


b = int(input("Ingrese la base: "))
exp = int(input("Ingrese el exponente: "))
resultado = pot_recur(b, exp)
print(f"{b} elevado a {exp} es: {resultado}")
"""
# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
# y devuelva su representaci√≥n en binario como una cadena de texto. 
# Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. 
# Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento: 
# 1. Dividir el n√∫mero por 2. 
# 2. Guardar el resto (0 o 1). 
# 3. Repetir el proceso con el cociente hasta que llegue a 0. 
# 4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario. 
"""
def recur_binario(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return str(recur_binario(n // 2)) + str(n % 2)
    
num = int(input("Ingrese un n√∫mero decimal positivo para convertir a binario: "))
print (f"El n√∫mero decimal {num} equivale a {recur_binario(num)} en binario")
"""
# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes,
# devuelva True si es un pal√≠ndromo o False si no lo es.      
# Requisitos: La soluci√≥n debe ser recursiva. No se debe usar [::-1] ni la funci√≥n reversed().
"""
def es_palindromo(palabra):
    if len(palabra) <= 1: #Caso base // si tiene una letra es pal√≠ndromo
        return True
    if palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

palabra = (input("Ingrese una palabra para saber si es pal√≠ndromo: "))
print (f"La palabra ingresada ¬øes pal√≠ndromo?: {es_palindromo(palabra)}")
""" 
# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y 
# devuelva la suma de todos sus d√≠gitos.      
# Restricciones: No se puede convertir el n√∫mero a string. # Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
# Ejemplos: 
# suma_digitos(1234)   ‚Üí 10  
# (1 + 2 + 3 + 4) suma_digitos(9)      ‚Üí 9 
# suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) 
"""
def suma_digitos(n):
    if n < 10: # Caso base. Si tiene un d√≠gito no hay suma, es = al d√≠gito.
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)
    

n=int(input("Por favor, ingrese un n√∫mero entero positivo para sumar sus d√≠gitos: "))
print (f"La suma de los d√≠gitos de {n} es {suma_digitos(n)}")
"""
# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. 
# En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), 
# y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.  
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo 
# y devuelva el total de bloques que necesita para construir toda la pir√°mide.        
# Ejemplos: 
# contar_bloques(1)   ‚Üí 1         (1) 
# contar_bloques(2)   ‚Üí 3         (2 + 1) 
# contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)  
"""
def contar_bloques(n):
    if n == 1:  # Caso base. Si el √∫ltimo nivel tiene 1 bloque, es s√≥lo 1
        return 1
    else:
        return n + contar_bloques(n - 1)

num=int(input("Ingrese la cantidad de bloques del nivel inferior para calcular el total necesario: "))
print(f"Se necesitan {contar_bloques(num)} bloques para construir toda la pir√°mide.")
"""
#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) 
# que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), 
# y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.       
# Ejemplos: 
# contar_digito(12233421, 2)   ‚Üí 3   
# contar_digito(5555, 5)       ‚Üí 4   
# contar_digito(123456, 7)     ‚Üí 0   
"""
def contar_digito(numero, digito):
    if numero == 0:  # Caso base. Si se reduce a 0, es 0.
        return 0
    else:
        ultimo_digito = numero % 10 #Comparo ultimo digito con el buscado
        if ultimo_digito == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

n=int(input("Ingrese un n√∫mero entero positivo: "))
d=int(input("Ingrese el d√≠gito que desea buscar en ese n√∫mero: "))
print (f"El d√≠gito {d} aparece {contar_digito(n, d)} vez/veces en el n√∫mero dado")
"""

def mystery(n):
    if n<=1:
        return n
    return mystery(n-1)+mystery(n-2)

print (mystery(4))